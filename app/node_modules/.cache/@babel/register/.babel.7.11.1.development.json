{
  "{\"sourceRoot\":\"/home/kewyn/Documents/nodejs/slave-leech/app/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/kewyn/Documents/nodejs/slave-leech/app\",\"filename\":\"/home/kewyn/Documents/nodejs/slave-leech/app/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/kewyn/Documents/nodejs/slave-leech/app\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.1": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/kewyn/Documents/nodejs/slave-leech/app/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/kewyn/Documents/nodejs/slave-leech/app",
      "filename": "/home/kewyn/Documents/nodejs/slave-leech/app/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/kewyn/Documents/nodejs/slave-leech/app",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/kewyn/Documents/nodejs/slave-leech/app/server.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/kewyn/Documents/nodejs/slave-leech/app/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/kewyn/Documents/nodejs/slave-leech/app/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.app = void 0;\n\nvar _http = _interopRequireDefault(require(\"http\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _cluster = _interopRequireDefault(require(\"cluster\"));\n\nvar _regeneratorRuntime = _interopRequireDefault(require(\"regenerator-runtime\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar app = (0, _express[\"default\"])();\nexports.app = app;\nvar workers = [];\n\nvar configCluster = function configCluster() {\n  var numCores = require('os').cpus().length;\n\n  console.log('Master cluster setting up ' + numCores + ' workers');\n\n  for (var i = 0; i < numCores; i++) {\n    workers.push(_cluster[\"default\"].fork());\n    workers[i].on('message', function (message) {\n      console.log(message);\n    });\n  }\n\n  worker_online_log();\n  worker_exit_log();\n};\n\nvar configExpress = function configExpress() {\n  app.server = _http[\"default\"].createServer(app);\n  app.use(_bodyParser[\"default\"].json({\n    limit: '2000kb'\n  }));\n  app.server.listen(3000, function () {\n    console.log('server listening in port 3000');\n  });\n  app.get('/', function (req, res) {\n    res.json({\n      health: 'UP'\n    });\n  });\n  app.get('/call', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime[\"default\"].mark(function _callee(req, res) {\n      return _regeneratorRuntime[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              init();\n              res.statusText = 'Request completed';\n              return _context.abrupt(\"return\", res.status(200).send('Ok'));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  app.get('/busy-wait/:time', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime[\"default\"].mark(function _callee2(req, res) {\n      var time;\n      return _regeneratorRuntime[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              time = req.params.time;\n              busyWait(time);\n              res.statusText = 'Request completed';\n              return _context2.abrupt(\"return\", res.status(200).send('Ok'));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  app.get('/sort/:value', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime[\"default\"].mark(function _callee3(req, res) {\n      var valueToSort, max;\n      return _regeneratorRuntime[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              valueToSort = req.params.value;\n              max = sort(valueToSort);\n              res.statusText = 'Request completed';\n              return _context3.abrupt(\"return\", res.json({\n                maxValue: max\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n};\n/**\n * Setup server either with clustering or without it\n * @param isClusterRequired\n * @constructor\n */\n\n\nvar setupServer = function setupServer(isClusterRequired) {\n  if (isClusterRequired && _cluster[\"default\"].isMaster) {\n    configCluster();\n  } else {\n    configExpress();\n  }\n};\n\nfunction worker_exit_log() {\n  _cluster[\"default\"].on('exit', function (worker, code, signal) {\n    console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);\n    console.log('Starting a new worker');\n\n    _cluster[\"default\"].fork();\n\n    workers.push(_cluster[\"default\"].fork());\n    workers[workers.length - 1].on('message', function (message) {\n      console.log(message);\n    });\n  });\n}\n\nfunction busyWait(time) {\n  var start = new Date();\n  var now;\n\n  while (true) {\n    now = new Date();\n\n    if (now - start >= time) {\n      break;\n    }\n  }\n}\n\nfunction worker_online_log() {\n  _cluster[\"default\"].on('online', function (worker) {\n    console.log('Worker ' + worker.process.pid + ' is online');\n  });\n}\n\nfunction init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime[\"default\"].mark(function _callee4() {\n    return _regeneratorRuntime[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log(1);\n\n          case 1:\n            if (!true) {\n              _context4.next = 7;\n              break;\n            }\n\n            _context4.next = 4;\n            return sleep(500);\n\n          case 4:\n            return _context4.abrupt(\"break\", 7);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _init.apply(this, arguments);\n}\n\nfunction sleep(ms) {\n  new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\nfunction sort(value) {\n  var aux = value;\n  var array = [];\n\n  function getRandom(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  for (var i = 0; i < aux; i++) {\n    array.push(getRandom(1, aux));\n  }\n\n  var len = array.length,\n      max = -Infinity;\n\n  while (len--) {\n    if (Number(array[len]) > max) {\n      max = Number(array[len]);\n    }\n  }\n\n  return max;\n}\n\n;\nsetupServer(true);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "workers",
        "configCluster",
        "numCores",
        "require",
        "cpus",
        "length",
        "console",
        "log",
        "i",
        "push",
        "cluster",
        "fork",
        "on",
        "message",
        "worker_online_log",
        "worker_exit_log",
        "configExpress",
        "server",
        "http",
        "createServer",
        "use",
        "bodyParser",
        "json",
        "limit",
        "listen",
        "get",
        "req",
        "res",
        "health",
        "init",
        "statusText",
        "status",
        "send",
        "time",
        "params",
        "busyWait",
        "valueToSort",
        "value",
        "max",
        "sort",
        "maxValue",
        "setupServer",
        "isClusterRequired",
        "isMaster",
        "worker",
        "code",
        "signal",
        "process",
        "pid",
        "start",
        "Date",
        "now",
        "sleep",
        "ms",
        "Promise",
        "resolve",
        "setTimeout",
        "aux",
        "array",
        "getRandom",
        "min",
        "Math",
        "floor",
        "random",
        "len",
        "Infinity",
        "Number"
      ],
      "mappings": "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",
      "sourceRoot": "/home/kewyn/Documents/nodejs/slave-leech/app/",
      "sourcesContent": [
        "import http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cluster from 'cluster';\nimport regeneratorRuntime from \"regenerator-runtime\";\n\nconst app = express();\nlet workers = [];\n\nconst configCluster = () => {\n  let numCores = require('os').cpus().length;\n  console.log('Master cluster setting up ' + numCores + ' workers');\n\n  for (let i = 0; i < numCores; i++) {\n    workers.push(cluster.fork());\n    workers[i].on('message', function (message) {\n      console.log(message);\n    });\n  }\n\n  worker_online_log();\n  worker_exit_log();\n};\n\n\nconst configExpress = () => {\n\n  app.server = http.createServer(app);\n\n  app.use(bodyParser.json({\n    limit: '2000kb',\n  }));\n\n  app.server.listen(3000, () => {\n    console.log('server listening in port 3000');\n  });\n\n  app.get('/', function (req, res) {\n    res.json({ health: 'UP' });\n  })\n\n  app.get('/call', async (req, res) => {\n    init();\n    res.statusText = 'Request completed'\n    return res.status(200).send('Ok')\n  });\n\n  app.get('/busy-wait/:time', async (req, res) => {\n    var time = req.params.time;\n    busyWait(time);\n    res.statusText = 'Request completed'\n    return res.status(200).send('Ok')\n  });\n\n  app.get('/sort/:value', async (req, res) => {\n    var valueToSort = req.params.value;\n    var max = sort(valueToSort);\n    res.statusText = 'Request completed'\n    return res.json({maxValue : max});\n  });\n\n};\n\n/**\n * Setup server either with clustering or without it\n * @param isClusterRequired\n * @constructor\n */\nconst setupServer = (isClusterRequired) => {\n\n  if (isClusterRequired && cluster.isMaster) {\n    configCluster();\n  } else {\n    configExpress();\n  }\n};\n\nfunction worker_exit_log() {\n  cluster.on('exit', function (worker, code, signal) {\n    console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);\n    console.log('Starting a new worker');\n    cluster.fork();\n    workers.push(cluster.fork());\n    workers[workers.length - 1].on('message', function (message) {\n      console.log(message);\n    });\n\n  });\n}\n\nfunction busyWait(time) {\n  var start = new Date();\n  var now;\n  while (true) {\n      now = new Date();\n      if (now - start >= time) {\n          break;\n      }\n  }\n}\n\nfunction worker_online_log() {\n  cluster.on('online', function (worker) {\n    console.log('Worker ' + worker.process.pid + ' is online');\n  });\n}\n\nasync function init() {\n  console.log(1);\n  while(true){\n    await sleep(500);\n    break;\n  }\n\n}\nfunction sleep(ms) {\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nfunction sort(value) {\n  var aux = value;\n  let array = [];\n  function getRandom(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  for (let i = 0 ; i < aux ; i++){\n    array.push(getRandom(1, aux));\n  }\n\n  var len = array.length, max = -Infinity;\n  while (len--) {\n    if (Number(array[len]) > max) {\n      max = Number(array[len]);\n    }\n  }\n  return max;\n};\n\nsetupServer(true);\n\n\n\nexport { app };\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1598049690813
  }
}